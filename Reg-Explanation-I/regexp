/**
 * Write a function `f(a, b)` which takes two strings as arguments and returns a
 * string containing the characters found in both strings (without duplication), in the
 * order that they appeared in `a`. Remember to skip spaces and characters you
 * have already encountered!
 *
 * Example: commonCharacters('acexivou', 'aegihobu')
 * Returns: 'aeiou'
 *
 * Extra credit: Extend your function to handle more than two input strings.
 */

var commonCharacters = function (string1, string2) {
  var myReg = new RegExp('[' + string1 + ']', 'g'), // regExp
    set = string2.match(myReg),
    setUniq = {}; //this loop removes duplicates in the solution
    for (var key in set) { setUniq[set[key]] = true; };
    return Object.keys(setUniq).join('')
};

var commonCharacters = function () {
  var strings = Array.prototype.slice.call(arguments, 1), //extra credit
    myReg = new RegExp('[' + arguments[0] + ']', 'g'), // regExp
    setUniq = {}, //duplicates
    set; // extra credit, first for loops througb string2 to stringx...
    for (var i in strings) { set = strings[i].match(myReg).join('');  }
    //this loop removes duplicates in the solution
    for (var key in set) { setUniq[set[key]] = true; };
    return Object.keys(setUniq).join('')
};

var longestRun = function (string) {
  var theRun = string.match(/([a-zA-Z])\1{1,}/g);
    console.log(theRun);
  return (theRun === null) ? [0, 0] : [ theRun.index, theRun[0].length ];
};

// console.log(commonCharacters('aacddooexiu', 'aaegihobu', 'ieoou'));

console.log(longestRun("BBSSS"))

