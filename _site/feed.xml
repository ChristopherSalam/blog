<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Christopher Salam</title>
    <description>thoughts on software and engineering</description>
    <link>ChristopherSalam.github.io</link>
    <atom:link href="ChristopherSalam.github.io/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>languages</title>
        <description>&lt;p&gt;&lt;strong&gt;Even if we all speak a different language we find a way to communicate&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;notes.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;Preparing for software engineering interviews:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;/job-seekers&quot; title=&quot;Qualatative Language Characteristics&quot;&gt;Links for job seekers&lt;/a&gt;&lt;/strong&gt; | Languages&lt;/p&gt;

&lt;p&gt;While attending a JavaScript bootcamp you do run into a bit of the dogma surrounding JavaScript as the...&lt;/p&gt;

&lt;p&gt;&lt;em&gt;quote Language of the Future endquote&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;That&amp;#39;s all fine and dandy and perhaps true to some extent, but low and behold we live in the present. And in the present, I&amp;#39;ve got these annoying interviews asking me about the other languages.&lt;/p&gt;

&lt;p&gt;So I&amp;#39;ve started work on them. Some questions deal with whether language is interpreted and compiled.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Compiled vs. Interpreted Languages.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is a pretty common question so let&amp;#39;s be somewhat exhaustive.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Compiled languages require a compiler (a translator) that convert source code into machine code pre-runtime.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;All C family languages, such as C,
C#, which compiles to Intermediary Language (IL) then is just-in-time(JIT) compiled to Assembly language.,
Objective-C, D.
Erlang, Go, Haskell, Java, Lisp, Scala, Swift in addition to the ones on &lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Compiled_language&quot;&gt;this list&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Advantages of Compiled Languages&lt;/p&gt;

&lt;p&gt;They run very quickly, as opposed to translated/interpretation.
Opportunity to apply powerful optimizations during the compile stage.&lt;/p&gt;

&lt;p&gt;Disadvantages of Compiled Languages&lt;/p&gt;

&lt;p&gt;Writing a compiler is difficult.
Code can&amp;#39;t be run without compilation&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Interpreted languages have instead of a compiler the ability to process the language on the machine and the code is read step by step.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Advantages&lt;/p&gt;

&lt;p&gt;Platform independent, i.e. being standalone.
Reflection, which means you can use the language to inspect and fix itself.
Dynamic typing which means that types can be set at runtime.
&lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Scope_(computer_science)#Dynamic_scoping&quot;&gt;Dynamic scoping which I&amp;#39;m going to leave to wikipedia&lt;/a&gt;&lt;/strong&gt;
Generally a smaller executable program size.&lt;/p&gt;

&lt;p&gt;Disadvantages&lt;/p&gt;

&lt;p&gt;Bugs from a lack of static type-checking
Susceptibility to code injection attacks
Slower execution except where JIT takes place
Can be read and copied in the case of commercial advantages (bleh)&lt;/p&gt;

&lt;p&gt;JavaScript (and EMCAscript, ActionScript, JScript). This is understanding that JS doesn&amp;#39;t have to be intepreted. Chrome uses compiled just-in-time(JIT), Perl, PHP, Python, Lisp, Ruby, and R and the &lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Interpreted_language&quot;&gt;other languages&lt;/a&gt;&lt;/strong&gt; here.&lt;/p&gt;
</description>
        <pubDate>Fri, 20 Nov 2015 00:00:00 -0800</pubDate>
        <link>ChristopherSalam.github.io/languages/</link>
        <guid isPermaLink="true">ChristopherSalam.github.io/languages/</guid>
      </item>
    
      <item>
        <title>job seekers</title>
        <description>&lt;p&gt;&lt;img src=&quot;imposter.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;Preparing for software engineering interviews:&lt;/p&gt;

&lt;p&gt;Links for job seekers | &lt;strong&gt;&lt;a href=&quot;/languages&quot; title=&quot;Qualatative Language Characteristics&quot;&gt;Language characteristics&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I wanted this space to be a location where I could post all the things that I&amp;#39;m reading as I prepare for my interviews... there has been a significant amount of preparation especially since many of the large companies I&amp;#39;m targeting really are steeped into deep computer science interview questions, so much so that even company representatives and my friends on the inside have been slipping me leads to get a chance. Here is a brief collection:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=10492086&quot; target=&quot;_blank&quot;&gt;Job links from Hacker News&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://medium.com/javascript-scene/10-interview-questions-every-javascript-developer-should-know-6fa6bdf5ad95#.sb8fvdn5t&quot; target=&quot;_blank&quot;&gt;10 things for JS Devs&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Google Developer Relations Specific&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://steve-yegge.blogspot.com/2008/03/get-that-job-at-google.html&quot; target=&quot;_blank&quot;&gt; &amp;nbsp;&amp;nbsp; Get that job at Google...&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://projecteuler.net/&quot; target=&quot;_blank&quot;&gt;&amp;nbsp;&amp;nbsp; Project Euler&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://www.careercup.com&quot; target=&quot;_blank&quot;&gt;&amp;nbsp;&amp;nbsp; Career Cup&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://medium.com/google-developers/why-do-we-pay-these-people-anyway-d7ed706d6d55&quot; target=&quot;_blank&quot;&gt;&amp;nbsp;&amp;nbsp; Developer Relations&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://medium.com/google-developers/the-core-competencies-of-developer-relations-f3e1c04c0f5b&quot; target=&quot;blank&quot;&gt;&amp;nbsp;&amp;nbsp; and their core competancies&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Algorithms&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Cache_algorithms&quot; target=&quot;blank&quot;&gt;&amp;nbsp;&amp;nbsp; Cache Specific&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Trees &amp;amp; Binary Search Trees&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://code.tutsplus.com/articles/data-structures-with-javascript-tree--cms-23393&quot;&gt;Trees Tutorial&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Binary_search_tree&quot;&gt;Binary search tree (BST)&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://www.cs.princeton.edu/~rs/AlgsDS07/08BinarySearchTrees.pdf&quot;&gt;BST in Literature &lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Red%E2%80%93black_tree&quot;&gt;Red black BST&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://gist.github.com/trevmex/821973&quot; target=&quot;_blank&quot;&gt;A pure JS BST implementation&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;!--

Why do you want to work at GitHub?  

I want to work at Github because I believe heavily in open source as a method for the best versions of software to come forward. I&#39;m fascinated with open and closed version control for non-software associations.

Why Client Applications?

I want to work specifically for Ecosystems because I believe that Atom and Electron will empower really new and interesting applications and companies and I want to help them achieve their goals. I have been interested in changing the tools we use while solving problems even before I was a software engineer, I&#39;ve worked in novel renewable energy systems with no established inventories of parts -&gt; we had to make our own solutions and each version of what we had was documented so we could continue to improve. Ben&#39;s description of what is needed for E.C.E. spoke to me directly, I would love to implement 1-2 week long projects to address bugs and needs in Atom, features that have been lost while staff works on deep seated issues, I think it&#39;s a perfect opportunity to learn the codebase and satisfy my own diverse interests and multi-threaded nature.

I really got into IDEs and framework design when working on a React Native project. The framework was so new we got an opportunity to give feedback to the architects, call for more documentation, and make our own, in the form of blogs, stack overflow, and github issues. I like documenting code and sharing examples as much as coding and figuring out issues themselves. I got a twitter account the day after Github Universe specifically to tweet at software companies and would enjoy crafting and sending out public communication. I would not use it as a personal platform.

Languages?

I am a JavaScript web engineer first and foremost. I love everything about it, it&#39;s quirks and asychronicity, and it&#39;s role as gatekeeper to the web. I also have experience (HTML, CSS), C++, Ruby, and statistics packages. I have dug out my college C++ book and have been reviewing it. I have read Objective-C as part of my work with React Native but not used it, Swift, C, or C# extensively.

Testing.

I am aware of testing, profiling and debugging techniques but are admittedly my weakness and I am eager to address this. I have used JavaScript framework testing suites such as Mocha, Chai, Jasmine, and really like Tape. Not used CI or BugSnag. I use DevTools.

Api design experience.

I have worked with many different API based protocols and some of my favorites are Firebase, Youtube, and sources of information such as Wikipedia and Sports Statistics Reference sites. Other than this role, I&#39;m mainly interested in roles working on large APIs and developer advocacy.

Bonus:

I have used Mac, Windows, and Linux extensively. I was an un-opinioned Windows user until college began, then switched over to Ubuntu Linux for college, graduate school, and the 4 years following (10 years). I recently started using Mac when I began to learn JavaScript. Electron really speaks to me because I would love to make desktop applications (and help make) across the three platforms.

How do you work in teams?

I am most comfortable with teamwork. I believe collaboration on programming and life is valuable and saves time. Within groups I believe it&#39;s important to work your strengths and address your weaknesses within reason. I typically take leadership roles when needed and high risk-reward endeavors when afforded.

What size team do you normally work with?

3-4 most commonly. I have worked in office, remote, and on-call for engineering projects. I believe that I would only ask people to do what I was willing and able to do myself. I believe in direct and open communication.

Do you find it difficult to give/receive edits?

Nope. As someone who has had to re-write his master&#39;s thesis over the course of a year to graduate, I deeply respect the style guide and the team process and will never allow my opinion or edits to undermine the greater good of working together.

What is your position on Open Source.

I want to work at Github because I believe heavily in open source as a method for the best versions of software to come forward. I believe it is a very difficult game to get into and the barriers that exist mirror that most of society has: wealth, privilege, &amp; hierarchy but rather than society, the walls have the potential to come down much faster and I believe will.

--&gt;
</description>
        <pubDate>Sun, 15 Nov 2015 00:00:00 -0800</pubDate>
        <link>ChristopherSalam.github.io/job-seekers/</link>
        <guid isPermaLink="true">ChristopherSalam.github.io/job-seekers/</guid>
      </item>
    
      <item>
        <title>agricultural</title>
        <description>&lt;p&gt;&lt;img src=&quot;farm.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;I did a degree in Agricultural Engineering, now called Biological Systems Engineering, at UC Davis from 2007-2011, mostly because I was interested in working with &lt;strong&gt;&lt;a href=&quot;http://www.cleanworld.com/our-team/&quot;&gt;Dr. Ruihong Zhang&lt;/a&gt;&lt;/strong&gt;, and her experience and research interests in anaerobic digestion of industrial and agricultural waste. We worked on a project in turkey waste digestion, in partnership with Cargill International, one of the largest meat and agricultural processing companies globally, and the results of the study are &lt;strong&gt;&lt;a href=&quot;http://adsabs.harvard.edu/abs/2011PhDT.......144S&quot;&gt;here&lt;/a&gt;&lt;/strong&gt;. In the end the project ended up giving Cargill the information to setup digesters at their processing facilities, potentially setting up a new diversion path for untold millions of gallons of waste.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;cows.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;I also had the opportunity to work &lt;strong&gt;&lt;a href=&quot;http://www.rcmdigesters.com/about-us/team/&quot;&gt;RCM digesters&lt;/a&gt;&lt;/strong&gt; from 2013-2014. RCM Digesters built manure digesters at Cow, Pig, and Chicken farms. I was able to apply a bit of my research and education here, as well as learn alot about Agriculture and Business in general. I worked on five projects, in Minnesota, Massachusetts, Upstate New York, and in North Eastern Australia. I worked on a very specific part of the anaerobic digestion process called hydrogen sulfide scrubbing, a process of removing a compound that is a trace part of the output of the digester, H2S, a chemical that can cause engine damage and is unsafe to inhale (but no where near the quantity that I experienced in &lt;strong&gt;&lt;a href=&quot;http://chrissalam.com/chemical&quot;&gt;Chemical Engineering&lt;/a&gt;&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;paper.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;Both of these experiences were particularly humorous to me as a vegetarian, but secretly I do appreciate the consumption of these goods providing me a job, even if I did find it pretty gnarly and unappetizing.&lt;/p&gt;

&lt;p&gt;In this space, I wanted to mention that there are a bunch of really cool and strange hackathon opportunities. I follow the &lt;strong&gt;&lt;a href=&quot;http://www.apps-for-ag.com/&quot;&gt;Aps for Ag hackathon&lt;/a&gt;&lt;/strong&gt; and attended a recent event in &lt;strong&gt;&lt;a href=&quot;http://kvpr.org/post/farmers-turn-tinder-app-inspiration&quot;&gt;Coalinga&lt;/a&gt;&lt;/strong&gt;, and will attend the upcoming event in Davis. Come with me if you are interested! There are not a lot of developers in the agricultural space and it&amp;#39;s an area ripe for simple software solutions.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;cold.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;!-- **This is a stub, there&#39;s more coming** --&gt;
</description>
        <pubDate>Tue, 10 Nov 2015 00:00:00 -0800</pubDate>
        <link>ChristopherSalam.github.io/agricultural/</link>
        <guid isPermaLink="true">ChristopherSalam.github.io/agricultural/</guid>
      </item>
    
      <item>
        <title>currying</title>
        <description>&lt;p&gt;Tonight, I watched Cassandra&amp;#39;s talk on functional programming, and I got pretty excited about currying, composing, and piping functions. I wanted to live code some practical examples, as I must admit it took seeing this several times for me to really wrap my head around this topic and I hope this helps!&lt;/p&gt;

&lt;p&gt;I would recommend going to Ramda.js&amp;#39;s website and pulling up a console there. Another option would be to npm install ramda and try these functions there. If you use sublime and do not have a JS build system, try this link from my classmate &lt;a href=&quot;http://jdlawrence.github.io/javascript/closures/2015/08/03/console-inside-sublime-text.html&quot;&gt;Jamil&lt;/a&gt;. You can also grab it from CDN via&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;//cdnjs.cloudflare.com/ajax/libs/ramda/0.17.1/ramda.min.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Currying is a transformation you can do to allow functions to take their some of their arguments at different times. Currying lets us partially fill the functions and keep them in position for later.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;curryArea&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;curry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;curryArea&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// [function]&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;curryArea&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Why is this useful?&lt;/p&gt;

&lt;p&gt;There&amp;#39;s a few reasons I think of just off the top:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Asynchronous functions fail because answers haven&amp;#39;t returned yet. If we run a function and leave it ready to catch the next argument we can process more asynchronously.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We can break our entire functions into discrete chunks, allowing preprocessing and storage of information in closures that will eventually process. Also, if they don&amp;#39;t end up processing, rather than get functions run with undefined, we have functions we can assess and pull partial information from.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It&amp;#39;s a gateway to understanding partial function application, which is even more powerful.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;!--

```javascript
function that invokes
var lines = R.invoker(1, &#39;split&#39;)(&#39;/n&#39;);
var split = R.split(&#39;/n&#39;);
```
var getItems = R.compose(
  R.filter(R.propEq(&#39;eventType&#39;,&quot;ITEM_DESTROYED&quot;)),
  R.flatten,
  R.map(R.prop(&#39;events&#39;))
)


--&gt;

&lt;p&gt;&lt;a href=&quot;http://alicekamada.github.io/&quot; &gt;&amp;quot;Pointfree Code is code that never refers to the code it handles:
it focuses on the logic, easier to reason about, and never have to wonder about the state.&amp;quot;&lt;/a&gt;&lt;/p&gt;

&lt;!--Anyways, we had a toy problem earlier in the program that asked us to write the functions for piping and composing functions. A pipe function asked us to create a function such that

```javascript
var newfunc =  R.pipe(func1, func2, func3)
```

where the newfunc(args_provided_to_function_one) --&gt;

&lt;p&gt;&lt;strong&gt;This is a stub, there&amp;#39;s more coming&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 04 Nov 2015 00:00:00 -0800</pubDate>
        <link>ChristopherSalam.github.io/currying/</link>
        <guid isPermaLink="true">ChristopherSalam.github.io/currying/</guid>
      </item>
    
      <item>
        <title>binary search</title>
        <description>&lt;p&gt;Trees and Binary Search Trees in particular are very important core topics in computer science, and in preparation for interviews, I&amp;#39;ll try my best to talk myself into believing I understanding trees, breath first search, depth first search, adding and removing nodes. I&amp;#39;m going to go through my tree analysis and convert it over to a binary search tree, as the best &lt;strong&gt;&lt;a href=&quot;https://www.cs.princeton.edu/~rs/AlgsDS07/08BinarySearchTrees.pdf&quot;&gt;literature &lt;/a&gt;&lt;/strong&gt; out there can be convoluted..&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Binary_search_tree&quot;&gt;binary search tree&lt;/a&gt;&lt;/strong&gt; is simpler in a tree in a way in that there are always only two children rather than an array to travel through, and rather than use traversal to set a point to add data, the data places itself within the structure by value sorting within the insertion. Conversely, remove a node is highly complicated. &lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Red%E2%80%93black_tree&quot;&gt;Red black trees&lt;/a&gt;&lt;/strong&gt; is eventually where I am building to. I&amp;#39;m heavily inspiried by this &lt;strong&gt;&lt;a href=&quot;https://gist.github.com/trevmex/821973&quot; target=&quot;_blank&quot;&gt;implementation&lt;/a&gt;&lt;/strong&gt; , but I&amp;#39;m going to try to write in the tree node root style so it matches the &lt;strong&gt;&lt;a href=&quot;/trees&quot; target=&quot;_blank&quot;&gt; Tree post&lt;/a&gt;&lt;/strong&gt; I made earlier.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//Psuedo-classical instantiation&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;leftChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rightChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;leftChild&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;leftChild&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rightChild&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rightChild&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BST&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;leftChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rightChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;leftChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rightChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The contains function is similar to the traversal function in a tree problem, but with logic to look through the tree according to value.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//key not found&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nodeValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nodeValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;leftChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nodeValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rightChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Traversal in a binary search tree is not recursive, the tree itself allows for log n time processing. We can use this logic to insert nodes as well. This method of inserting does not balance the tree. Balancing the tree is a whole other can of worms, but balancing a tree helps optimize the traversal.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;leftChild&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rightChild&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nodeValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nodeValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;insertNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;leftChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nodeValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;insertNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rightChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Insertion in a binary search tree happens with much of the same logic as the contains, which leads us naturally to think there must be a way to take the function from one and place it into the other.&lt;/p&gt;

&lt;!--


```javascript
// Depth First, Initial Attempt
Tree.prototype.traverse = function(callback) {
   callback.call(this, this.value);
   var i;
   for (i = 0; i &lt; this.children.length; i++) {
     this.children[i].traverse(callback);
   }
}
```
While this is an effective and less expensive method of depth first traversing, the recursive method is often described instead, because it makes it more clear the step by step approach of traveling through to the extrema before moving back up the tree.

We should be following four clear steps for a depth first traversal (&lt;a href=&quot;http://code.tutsplus.com/articles/data-structures-with-javascript-tree--cms-23393&quot;&gt;taken from codetuts&lt;/a&gt;):

Step 1. Immediately invoke recurse with the root node of a tree as its argument. At this moment, currentNode points to the current node.
Step 2. Enter a for loop and iterate once for each child of currentNode, beginning with the first child.
Step 3. Inside the body of the for loop, invoke recurse with a child of currentNode. The exact child depends on the current iteration of the for loop.
Step 4. When currentNode no longer has children, we exit the for loop and invoke the callback we passed during the invocation of traverseDF(callback).

```javascript
Tree.prototype.traverseDF = function(callback) {
   // this is a recurse and immediately-invoking function
   (function recurse(currentNode) {
       // step 2
       for (var i = 0, length = currentNode.children.length; i &lt; length; i++) {
           // step 3
           recurse(currentNode.children[i]);
       }
       // step 4
       callback(currentNode);
       // step 1
   })(this._root);
};
```

Let this sink in forever. My version of figuring out breadth first traversal was pretty much the same as the one with a document root.

```javascript
// Breadth First, Initial Attempt
Tree.prototype.traverse = function(callback) {
 var queue = [this],
 current = queue.shift();
   while (current) {
     for (var i = 0; i &lt; current.children.length; i++) {
       queue.push(current.children[i]);
     }
     callback.call(current, current.value);
     current = queue.shift();
   }
}

Tree.prototype.traverseBF = function(callback) {
   var queue = [this._root];
   currentTree = queue.shift();
   while(currentTree){
       for (var i = 0, length = currentTree.children.length; i &lt; length; i++) {
           queue.push(currentTree.children[i]);
       }
       callback(currentTree);
       currentTree = queue.shift();
   }
};
```

Writing out both these traversal techniques finally let us call contains with either kind of traversal. This is a pretty simple process.

```javascript
//
Tree.prototype.contains = function(callback, bfdf) {
   bfdf.call(this, callback);
};
```

Now we can use either method of traversal to create a way to calculate the size of our tree. Super straightforward traversal with callback that counts.

```javascript
Tree.prototype.size = function() {
 var size = 0;
 this.traverseDF(function(){
   size++;
 })
 return size;
}
```
Adding, and subsequently removing are the real pieces to a non-binary tree structure. Adding correctly to a certain value assumes that there are only one or two equal values within the tree and that using either breadth or depth first traversal will get to the desired node. Additionally both add and remove change the tree structure to accommodate the added or removed value value. At point where the data was added or removed, the child needs to be changed, when added, a new tree of data, complete with parent and children needed to be declared, and the parent of the children need to be changed. Lots of logic!

```javascript
Tree.prototype.add = function(value, atValue, bfdf) {
 var child = new Tree(value),
   parent = null,
   callback = function(node) {
     if (node.value === atValue) {
       parent = node;
     }
   };
 this.contains(callback, bfdf);
 if (parent) {
   parent.children.push(child);
   child.parent = parent;
 }
}
```

First step is the create a new node, with the correct value, but missing a parent and children. The callback does the critical step of traversing through the tree&#39;s structure and finding the correct parent and setting it equal to a variable, determined by the &#39;atValue&#39; provided as input. When the parent is found and set, the last step of the function is to set the new node as a children of the parent, and when this step is taken, both sides of the relationship are set, with the second line at the bottom taking our variable and setting it as the child.parent. Again with comments in-line:

```javascript
Tree.prototype.add = function(value, atValue, bfdf) {
//create a new node
 var child = new Tree(value),
//create a variable to store
//the parent when found
   parent = null,
//create a callback to find your
//parent, using input &#39;atValue&#39;
   callback = function(node) {
     if (node.value === atValue) {
       parent = node;
     }
   };
//traverse, either Breadth or
//Depth first to find parent
 this.contains(callback, bfdf);
 if (parent) {
//when parent is found, set the
//node as a child of the parent
//variable (Part 1)
   parent.children.push(child);
//use the parent variable and set
//it as the child&#39;s parent (Part 2)
   child.parent = parent;
 }
}
```

Pretty helpful to see it step by step, right? Let&#39;s try to do the same for remove! I&#39;m sure you don&#39;t need anymore enticement, but this is one of the holy grails of all interviews it seems.

```javascript
Tree.prototype.remove = function(data, fromData, bfdf) {
function findIndex(arr, data) {
   var index;
   for (var i = 0; i &lt; arr.length; i++) {
       if (arr[i].data === data) {
           index = i;
       }
   }
   return index;
}
   var tree = this,
       parent = null,
       childToRemove = null,
       index;
   var callback = function(node) {
       if (node.data === fromData) {
           parent = node;
       }
   };
   this.contains(callback, bfdf);
   if (parent) {
       index = findIndex(parent.children, data);
       if (index === undefined) {
           throw new Error(&#39;Node to remove does not exist.&#39;);
       } else {
           childToRemove = parent.children.splice(index, 1);
       }
   } else {
       throw new Error(&#39;Parent does not exist.&#39;);
   }
   return childToRemove;
};
```

Very complicated, right? The fundamental difficulty with removing a node is how simple overwriting adding a node. The parent that&#39;s no longer the child gets overwritten when you do this at the bottom of Tree.prototype.add:

```javascript
   child.parent = parent;
```

When you remove a node, you have two bridge two nodes that weren&#39;t connected directly before. And that&#39;s what the bulk of the code above is trying to do. Let&#39;s step through it.

```javascript
Tree.prototype.remove = function(data, fromData, bfdf) {
//similar to indexOf except accessing element.data instead of element
function findIndex(arr, data) {
   var index;
   for (var i = 0; i &lt; arr.length; i++) {
       if (arr[i].data === data) {
           index = i;
       }
   }
   return index;
}
// create reference to tree before change.
   var tree = this,
// similar to add, create parent and childToRemove variables
       parent = null,
       childToRemove = null,
       index;
// create callback to find the fromData datapoint using contains
   var callback = function(node) {
       if (node.data === fromData) {
           parent = node;
       }
   };
// traverse through the tree.
   this.contains(callback, bfdf);
// will find a parent
   if (parent) {
       index = findIndex(parent.children, data);
// edge case of undefined index
       if (index === undefined) {
           throw new Error(&#39;Node to remove does not exist.&#39;);
// work of splicing out the index that needs to be removed.
       } else {
           childToRemove = parent.children.splice(index, 1);
       }
   } else {
       throw new Error(&#39;Parent does not exist.&#39;);
   }
   return childToRemove;
};
```
I&#39;ve included the logged statements I had at the end of my file that I used to test my work. You can see the add and the addChild functions juxtaposed. What I achieved with simplicity with the addChild, later ended up costing me because it was tricky simply to add to my own tree.

```javascript
var tree = new Tree(0);
tree.add(1, 0, tree.traverseDF);
tree.add(2, 0, tree.traverseDF);
// tree.addChild(1);
// tree.addChild(2);
// tree.children[0].addChild(3);
tree.add(3, 1, tree.traverseDF);
// tree.add(3,1,tree.BFtraverse);
// tree.children[0].children[0].addChild(4);
tree.add(4, 3, tree.traverseDF);
tree.add(5, 2, tree.traverseBF);
tree.remove(5, 2, tree.traverseBF);
console.log(tree);
```

I will add the testing suite from the add, remove, contains, breadth and depth first searches soon...

```javascript
// tree.children[1].children[0].addChild(7);
// console.log(tree.contains(console.log,tree.DFtraverse)); // yields &#39;true&#39;
// console.log(tree.contains(0)); // yields &#39;true&#39;
// console.log(tree.contains(1)); // yields &#39;true&#39;
// console.log(tree.contains(4)); // yields &#39;false&#39;
// console.log(&quot;Depth&quot;);
// tree.DFtraverse(console.log);
// console.log(&quot;Breadth&quot;);
// tree.BFtraverse(console.log);
console.log(tree.size());
```
--&gt;

&lt;p&gt;&lt;strong&gt;This is a stub, there&amp;#39;s more coming&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 31 Oct 2015 00:00:00 -0700</pubDate>
        <link>ChristopherSalam.github.io/binary-search/</link>
        <guid isPermaLink="true">ChristopherSalam.github.io/binary-search/</guid>
      </item>
    
      <item>
        <title>software</title>
        <description>&lt;p&gt;I&amp;#39;m pretty new to this game. It&amp;#39;s been about 2 years. When people ask me how I arrived at this transition, I tell them that I was heavily inspired by learning Autocad at 28, and by my partner, Amy Yoshitsu, who&amp;#39;s transitioned part-time from working as a Designer to Design/Developing. We saw an opportunity to help each other as well as possibly work together someday and it seemed too reasonable to pass up.&lt;/p&gt;

&lt;p&gt;So, now I&amp;#39;m here! I&amp;#39;m in the midst of some really unexpected interviews at great companies, made possible through hard work, connections from college, grad school, and primarily my bootcamp, and I feel motivated and excited to enter into a new profession that is constantly growing and needs more people all the time. To compare markets, when I was looking for work as a agricultural, environmental, or chemical engineer, I would see 2-3 jobs in each city, with regards to software, especially in the Bay Area, I&amp;#39;ve heard the numbers are such that for every unemployed scientist or engineer there are 5 openings as a front end, software, backend, or data scientist, and I fully expect to serve as one of these in a few months.&lt;/p&gt;

&lt;p&gt;I wanted to use the space to describe a bunch of other options I&amp;#39;ve found out while attending the bootcamp and learning about opportunities at various software companies. A big job role that I&amp;#39;m personally very excited about is one called a Developer Advocate (or sometimes Developer Evangelist). This person is typically at a large company which exposes an API or a type of software service that other developers can use. Some companies live entirely off this, Twilio&amp;#39;s phone APIs and Firebase database APIs are big examples, and most of Google&amp;#39;s developer&amp;#39;s services have Developer Advocates you can work with and call directly to troubleshoot using their services. Developer Advocates also travel and speak at conferences and booths for the Software Company, and write code that can be used for examples and demonstrations.&lt;/p&gt;

&lt;p&gt;There are also roles at companies and at bootcamps teaching software to others getting into the industry, high school students, and middle school students. I believe developer education will be an even bigger movement as we continue to automate and move into the age of the industrial internet, when all our devices need to communicate with each other to increase their efficiency and effectiveness.&lt;/p&gt;

&lt;p&gt;Engineering manager is a role I feel like I&amp;#39;ve been groomed for for many years, my friends in Software have told me that I have the capacity to motivate very smart people and lends itself naturally to a engineering manager role. The job of the engineering manager is to make sure turnover is low, and that engineers with very different psychologies stay motivated and work well with each other.&lt;/p&gt;

&lt;p&gt;I&amp;#39;ll come back with some more roles in a bit, but I have an interview in a few hours! Woo hoo!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This is a stub, there&amp;#39;s more coming&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 26 Oct 2015 00:00:00 -0700</pubDate>
        <link>ChristopherSalam.github.io/software/</link>
        <guid isPermaLink="true">ChristopherSalam.github.io/software/</guid>
      </item>
    
      <item>
        <title>console</title>
        <description>&lt;p&gt;This area I&amp;#39;ve been saving for sundries regarding the console. It&amp;#39;s a pretty powerful little area within the browser you can use to access lots of information. Every now and then you&amp;#39;ll find yourself making a great discovery in the console and you&amp;#39;ll want to grab what you find there and pull it out.&lt;/p&gt;

&lt;p&gt;This is a little trick I found deep on Stack Overflow that hopefully they will make more accessible in the future:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/*in console*/&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Data&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{...};&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// right click on the edge of the Object&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// store as a temporary variable&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// creates &amp;#39;temp1&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;temp1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// and then run this command&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// to make this is available for&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// pasting in text editor.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;None of this stuff is mine, but was revealed to me by Scott Moss, our AngularJS lecturer, who must be involved with web standards and gets this information in advance. If you go to the console in chrome, certain methods that aren&amp;#39;t common practice are made available.&lt;/p&gt;

&lt;p&gt;Long story made short:&lt;/p&gt;

&lt;p&gt;In the beginning the DOM was a bear to deal with.&lt;/p&gt;

&lt;p&gt;They made jQuery, which fixed alot of DOM problems.&lt;/p&gt;

&lt;p&gt;They later just fixed browser issues, and then built some more powerful features into Chrome.&lt;/p&gt;

&lt;p&gt;Now I&amp;#39;m going to show you some next gen tricks that you don&amp;#39;t need jQuery for that are in Chrome.&lt;/p&gt;

&lt;p&gt;If this is too much of a fast forward and you want to see some of what jQuery does to help, &lt;strong&gt;&lt;a href=&quot;http://callmenick.com/post/jquery-functions-javascript-equivalents&quot;&gt;go here&lt;/a&gt;&lt;/strong&gt;. Some favor writing out the full JS nowadays (as I do).&lt;/p&gt;

&lt;p&gt;I opened a console (⌘+option+j) in my blog. To prove jQuery is absent:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;jQuery.png&quot; alt=&quot;jQuery is not here.&quot;&gt;&lt;/p&gt;

&lt;p&gt;But... $ is here. Strange right?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;$.png&quot; alt=&quot;Dollar sign is here.&quot;&gt;&lt;/p&gt;

&lt;p&gt;What does this do without jQuery present? This would default to theequivalent of querySelectorAll, howvever this is something different, this is querySelectTheFirst ThatComesUp.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;$div.png&quot; alt=&quot;$div in console&quot;&gt;&lt;/p&gt;

&lt;p&gt;What imitates querySelectorAll? What about $$?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;$$.png&quot; alt=&quot;$$ is querySelectorAll&quot;&gt;&lt;/p&gt;

&lt;p&gt;The double $ command line API helps us get querySelectorAll functionality.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;$$div.png&quot; alt=&quot;$$div&quot;&gt;&lt;/p&gt;

&lt;p&gt;What&amp;#39;s nice is that it also gives us access to things as a simple array of items, rather that the large confusing jQuery object.&lt;/p&gt;

&lt;p&gt;In this same vein of new Chrome tools, you may have accessed the ID of an object typing this stuff out.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;$main.png&quot; alt=&quot;$main&quot;&gt;&lt;/p&gt;

&lt;p&gt;An id has always been unique. This is the very definition of unique. This id has always been available on the window object.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;windowmain.png&quot; alt=&quot;$main&quot;&gt;&lt;/p&gt;

&lt;p&gt;This accesses the same information as $(&amp;#39;#main&amp;#39;). However, you can take this trick even further. Even without the &amp;#39;window.&amp;#39; present, it can figure out what to do next.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;main.png&quot; alt=&quot;$main&quot;&gt;&lt;/p&gt;

&lt;p&gt;Pretty cool right?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This is a stub, there&amp;#39;s more coming&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 22 Oct 2015 00:00:00 -0700</pubDate>
        <link>ChristopherSalam.github.io/console/</link>
        <guid isPermaLink="true">ChristopherSalam.github.io/console/</guid>
      </item>
    
      <item>
        <title>chemical</title>
        <description>&lt;p&gt;I&amp;#39;m a certified Professional Chemical Engineer in the state of California. I mainly did this because I was interested in becoming a P.E. in California, and there were salary benefits at a future government job I could obtain. As demonstrated, patience is not one of my best traits, and after applying about 15-20 jobs where I felt that someone was always in line to take the role, I decided against continuing this strategy and left for private employment. Also I was pretty happy to leave Bakersfield and get back to my partner, family, and friends in the Bay.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;closerig.jpg&quot; alt=&quot;close up rig&quot;&gt;&lt;/p&gt;

&lt;p&gt;I do still love Chemical Engineering. It&amp;#39;s a very interesting profession that deals with lots of the world&amp;#39;s manufacturing processes. Many chemical engineers often work as petroleum engineers, and there are very few schools that teach specifically petroleum engineering, but it is a niche profession that will always attract some of the hardiest incredible people. I was fascinated to learn about all the various different kinds of person I met in the oilfields.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;bigrig.jpg&quot; alt=&quot;bigrig&quot;&gt;&lt;/p&gt;

&lt;p&gt;Oilrigs are beautiful machines, the combine motility and function, they have subdivided tasks into different trucks. I don&amp;#39;t have many pictures of these, but many operations don&amp;#39;t even require these large rigs anymore and can be accomplished with &lt;a href=&quot;https://en.wikipedia.org/wiki/Coiled_tubing&quot;&gt; trucks with large coiled tubes &lt;/a&gt;, which can function to pump cement, oil, water, insert dynamite, and do various other oil-field functions very handily.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.stewartandstevenson.com/assets/galleries/237/tt-100-xc-coiled-tubing.png&quot; alt=&quot;coil rig&quot;&gt;&lt;/p&gt;

&lt;p&gt;We have maybe very little context for oilfields, some have driven past large fields in Los Angeles or the Central Valley. In Bakersfield, the lines between oilfield land and public and private land blur. Everyone is touched by oil, many of the city&amp;#39;s population work in a oil based profession, and that leads many to seek deals or consider oil development on their property, whether that property is rural, farm, industrial, civil, or even suburban.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;subrig.jpg&quot; alt=&quot;suburban rig&quot;&gt;&lt;/p&gt;

&lt;p&gt;I was also kind of surprised to learn but it made sense that these rigs drill 24/7, every does 12 hours on and 12 hours off. It makes sense though! You need to maximum the time this expensive equipment is being used, and the moment it&amp;#39;s done at one location, it needs to move to another. The system is highly optimized. Additionally, wells and all the personnel and equipment costs typically pay themselves back after 2-3 months of oil production, the rest is pure profit.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;nightrig.jpg&quot; alt=&quot;night rig&quot;&gt;&lt;/p&gt;

&lt;p&gt;And these go super deep. This is a tag nearly 10000 ft down, but many are down at 1000-3000 ft deep, and the deepwater horizon well was at 5,000 ft, and the deepest wells ever dug are a Russian exploration well in Siberia called &lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Kola_Superdeep_Borehole&quot;&gt;Kola Superdeep Borehole&lt;/a&gt;&lt;/strong&gt; which is 40,230 and was completed in 1989 before some new deep weels in the Middle East started to go even deeper.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;nightrigdash.jpg&quot; alt=&quot;dash&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This is a stub, there&amp;#39;s more coming&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 18 Oct 2015 00:00:00 -0700</pubDate>
        <link>ChristopherSalam.github.io/chemical/</link>
        <guid isPermaLink="true">ChristopherSalam.github.io/chemical/</guid>
      </item>
    
      <item>
        <title>environmental</title>
        <description>&lt;p&gt;Where do I even begin with this?&lt;/p&gt;

&lt;p&gt;There are two classes of jobs in a way: One that requires repetition and one that requires constant troubleshooting.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;kord.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;The reason I couldn&amp;#39;t see myself being a musician or an athelete was because of the repetition needed to be perfect. I never had those instincts. I want to learn a skill, use it, and move on.&lt;/p&gt;

&lt;p&gt;I never understood that by in large, majoring in a topic meant that for work you would end up largely working to fix or repair this day in day out. Lawyers, doctors, engineers, were by in large troubleshooting keeping the system afloat. In the end, I also started to factor my own personal safety highly into this equation of needs.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;lift.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;For the environmental aspects of industrial systems, this meant that by and large I was going to have to watch the systemic deconstruction of our natural world, while the industries, slowly dragged themselves to this reality where synthetic manufacturing would be minimized. Maybe had a stayed in the game, I would be contributing to projects with biocompostable plastics or some other technology that really changes the game with regards to waste, but I came around to the believe that through software and resource sharing, the opportunity would to reduce energy use and materials would be signficant and not require a shift in our manufacturing systems. So this began to be the kind of optimization I would pursue wholesale.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;plub.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;Or maybe that&amp;#39;s the rationalizing what happened, which is that it was nearly impossible to find a job in my chosen field, and rather than dwell on it, I decided to transition to a robust job market.&lt;/p&gt;

&lt;p&gt;Either way, I&amp;#39;ve had the opportunity to dump tons of gallons of waste inadvertently into rivers. I&amp;#39;ve sent giant containers of sulfurous material to landfills, and I&amp;#39;ve watched petroleum drain into rivers, suburban areas, and witnessed fracking subsidence. Why? Because in a way there&amp;#39;s often no budget that would lead to actual solutions, or the solution we came up with is the best thing for the environment given that we have industrial targets for production elsewhere in the project. It was a tightrope walk to be sure.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;drake.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;I am very hopeful that I will be able to return to the environmental world with a startup someday but for now, I&amp;#39;m happy to pursue a job where I&amp;#39;m not quite as responsible for physical degradation.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;gasket.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This is a stub, there&amp;#39;s more coming&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 12 Oct 2015 00:00:00 -0700</pubDate>
        <link>ChristopherSalam.github.io/environmental/</link>
        <guid isPermaLink="true">ChristopherSalam.github.io/environmental/</guid>
      </item>
    
      <item>
        <title>connecting node &amp; neo4j</title>
        <description>&lt;p&gt;This post is part 4 in a 4 part series. Read the other posts:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;/try-neo4j&quot; title=&quot;Getting Started&quot;&gt;Part 1 - Try Neo4j&lt;/a&gt;&lt;/strong&gt; | &lt;strong&gt;&lt;a href=&quot;/query-neo4j&quot; title=&quot;Learning Database Language&quot;&gt;Part 2 - Query Neo4j&lt;/a&gt;&lt;/strong&gt; | &lt;strong&gt;&lt;a href=&quot;/collision&quot; title=&quot;Resolving Duplicates&quot;&gt;Part 3 - Collisions&lt;/a&gt;&lt;/strong&gt; | Part 4 | &lt;strong&gt;&lt;a href=&quot;https://github.com/upstanding-biome/sixdegrees&quot;&gt;Repo&lt;/a&gt;&lt;/strong&gt; | &lt;strong&gt;&lt;a href=&quot;http://sixdribbles.com&quot;&gt;Site&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This post addresses a major struggle we had with this project. Within 4 days we were able to build a neo4j database accessing our local database to produce connections and render them to the screen... on localhost. We did not realize that the journey towards hosting the site would take another month (and have to be worked on in the midst of two other projects, i.e. on Sunday or 12pm-2am was the only time we had to work). The main challenge for me was a fundamental learning curve with Nodejs and noe4j and using two techologies to make this process work with heroku.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; Graph Story, a company that provides instructions for a neo4j instance on heroku (and other hosting services, I&amp;#39;m sure)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; Seraph, a tiny library written to allow neo4j to render to the client and dodge CORS (cross origin resource sharing) conflicts.&lt;/p&gt;

&lt;p&gt;I&amp;#39;ll begin to share snippets from the code here and hopefully prevent slowdown for future neo4j experimenters.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This is a stub, there&amp;#39;s more coming&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 08 Oct 2015 00:00:00 -0700</pubDate>
        <link>ChristopherSalam.github.io/node-neo4j/</link>
        <guid isPermaLink="true">ChristopherSalam.github.io/node-neo4j/</guid>
      </item>
    
  </channel>
</rss>